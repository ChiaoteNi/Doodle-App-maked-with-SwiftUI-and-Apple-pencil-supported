//
//  DoodleView.swift
//  Doodles in SwiftUI
//
//  Created by 倪僑德 on 2021/12/27.
//  Copyright (c) 2021 iOS@Taipei in iPlayground 2020. All rights reserved.
//
//  This file was generated by iOS@Taipei's Clean Architecture Xcode Templates, which
//  is goaled to help you apply clean architecture to your iOS projects,
//

import SwiftUI


struct DoodleView: View {
    
    @Store var store: DoodleVMSpec
    var interactor: DoodleBusinessLogic
    
    var body: some View {
        ZStack {
            if store.doodle.isFocus {
                Rectangle()
                    .colorMultiply(.clear)
                    .border(.gray, width: 1)
            }
            DoodleRepresentView(
                doodle: store.doodle,
                color: store.color,
                brush: store.brush
            )
        }
        .frame(
            width: store.doodle.frame.width,
            height: store.doodle.frame.height,
            alignment: .topLeading
        )
        .rotationEffect(Angle(degrees: store.doodle.rotationDegree))
        .scaleEffect(store.doodle.scale)
        .position(
            x: store.doodle.frame.midX,
            y: store.doodle.frame.midY
        )
        .simultaneousGesture(
            tap
                .simultaneously(with: drag)
                .simultaneously(with: rotation)
                .simultaneously(with: magnification)
        )
    }
    
    init(store: DoodleStore) {
        let interactor: DoodleInteractor = .init()
        interactor.stateStore = store
        
        self.interactor = interactor
        _store = Store(wrappedValue: store)
    }
}

// MARK: - Gestures {
extension DoodleView {
    
    private var tap: some Gesture {
        TapGesture(count: 1)
            .onEnded { _ in interactor.didTapped(store.doodle) }
    }
    
    private var drag: some Gesture {
        DragGesture(minimumDistance: 1, coordinateSpace: .local)
            .onChanged({ gesture in
                interactor.didDragged(store.doodle, translation: gesture.translation)
            })
            .onEnded { gesture in
                interactor.didEndDragging(store.doodle, translation: gesture.translation)
            }
    }
    
    private var rotation: some Gesture {
        RotationGesture()
            .onChanged({ gesture in
                interactor.didRotated(store.doodle, degrees: gesture.degrees)
            })
            .onEnded { gesture in
                interactor.didEndRotating(store.doodle, degrees: gesture.degrees)
            }
    }
    
    private var magnification: some Gesture {
        MagnificationGesture(minimumScaleDelta: 0.1)
            .onChanged({ value in
                interactor.didMagnificated(store.doodle, scale: value)
            })
            .onEnded { value in
                interactor.didEndMagnificating(store.doodle, scale: value)
            }
    }
}
